{"config":{"lang":["tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site contains the project documentation for the <code>calculator</code> project that is a toy module used in the Real Python tutorial Build Your Python Project Documentation With MkDocs. Its aim is to give you a framework to build your project documentation using Python, MkDocs, mkdocstrings, and the Material for MkDocs theme.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides/","title":"Orbitlab Python library","text":"<p>Bu yaz\u0131l\u0131m, Orbit robotunu yerel a\u011f \u00fczerinden Python ile kontrol etmek i\u00e7in geli\u015ftirilmi\u015ftir. Temel amac\u0131, \u00f6\u011frencilerin fiziksel bir robotla etkile\u015fim kurarak robotik programlama konusunda uygulamal\u0131 deneyim kazanmalar\u0131n\u0131 sa\u011flamakt\u0131r. K\u00fct\u00fcphane, Orbit platformunun temel i\u015flevlerini sunar: motor kontrol\u00fc, sens\u00f6r verilerine eri\u015fim, robot y\u00fcz ifadesinin de\u011fi\u015ftirilmesi, ses \u00e7alma, LDR (\u0131\u015f\u0131\u011fa duyarl\u0131 diren\u00e7) ayar\u0131 ve daha fazlas\u0131. Bu sayede kapsaml\u0131 ve pratik bir \u00f6\u011frenme deneyimi sunar. Ayn\u0131 zamanda da simulasyon \u00f6zelli\u011fi sahiptir.</p>"},{"location":"how-to-guides/#yazlm-gereksinimleri","title":"Yaz\u0131l\u0131m gereksinimleri","text":"<ol> <li>Orbit robot: Daha fazla bilgi i\u00e7in Orbitrobots ziyaret edin</li> <li>Python &gt;= 3.0: Python'u indirin Python</li> </ol>"},{"location":"how-to-guides/#kurulum","title":"Kurulum","text":"<pre><code>pip install orbitlab\n</code></pre>"},{"location":"how-to-guides/#kullanm-ornegi","title":"Kullan\u0131m \u00f6rne\u011fi","text":"<pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver(\"&lt;orbit_ip_address&gt;\")\n\norbit.set_rpm([10, -10])\ntime.sleep(5)\norbit.stop()\n</code></pre> <ol> <li> <p><code>import time</code></p> </li> <li> <p>Program\u0131n belirli bir s\u00fcre duraklamas\u0131n\u0131 sa\u011flamak i\u00e7in Python\u2019un yerle\u015fik time mod\u00fcl\u00fcn\u00fc i\u00e7e aktar\u0131r.</p> </li> <li> <p><code>from orbitlab import OrbitDriver</code></p> </li> <li> <p>Orbit robotunu kontrol etmek i\u00e7in kullan\u0131lan \u00f6zel OrbitDriver s\u0131n\u0131f\u0131n\u0131 i\u00e7e aktar\u0131r.</p> </li> <li> <p><code>orbit = OrbitDriver(\"&lt;orbit_ip_address&gt;\")</code></p> </li> <li> <p>Orbit robotuna yerel a\u011f \u00fczerinden ba\u011flant\u0131 kurar.</p> </li> <li> <p><code>\"&lt;orbit_ip_address&gt;\"</code> k\u0131sm\u0131 robotun ger\u00e7ek IP adresiyle (\u00f6rne\u011fin \"192.168.1.42\") de\u011fi\u015ftirilmelidir.</p> </li> <li> <p><code>orbit.set_rpm([10, -10])</code></p> </li> <li> <p>Motorlara RPM komutu g\u00f6nderir:</p> <ul> <li> <p>Sol tekerlek: 10 RPM (ileri)</p> </li> <li> <p>Sa\u011f tekerlek: -10 RPM</p> </li> </ul> </li> <li> <p>Bu durumda, sa\u011f motor fiziksel olarak ters ba\u011fland\u0131\u011f\u0131 i\u00e7in -10 RPM komutu da onu ileri y\u00f6nde hareket ettirir.</p> </li> <li> <p>Sonu\u00e7 olarak, her iki tekerlek de ileri ayn\u0131 h\u0131zda hareket eder ve robot d\u00fcz bir \u015fekilde ileri gider (d\u00f6nme yapmaz).</p> </li> <li> <p><code>time.sleep(5)</code></p> </li> <li> <p>Robotun 5 saniye boyunca hareket etmeye devam etmesini sa\u011flar.</p> </li> <li> <p><code>orbit.stop()</code></p> </li> <li> <p>Her iki motoru da durdurarak robotu durdurur.</p> </li> </ol>"},{"location":"how-to-guides/#rpm-ve-enkoderleri-anlamak","title":"RPM ve Enkoderleri Anlamak.","text":"<p>RPM, dakikadaki devir say\u0131s\u0131 anlam\u0131na gelen \"Revolutions Per Minute\" ifadesinin k\u0131saltmas\u0131d\u0131r.</p> <p>Bu, d\u00f6nen bir nesnenin bir dakikada ka\u00e7 tam tur att\u0131\u011f\u0131n\u0131 g\u00f6steren d\u00f6nme h\u0131z\u0131 birimidir. Genellikle a\u015fa\u011f\u0131daki gibi d\u00f6nen cihazlar\u0131n h\u0131z\u0131n\u0131 tan\u0131mlamak i\u00e7in kullan\u0131l\u0131r:</p> <ul> <li>Motorlar (\u00f6rne\u011fin: bir DC motorun 3000 RPM\u2019de d\u00f6nmesi)</li> <li>Tekerlekler</li> <li>Fanlar</li> <li>Sabit diskler</li> <li>Robot akt\u00fcat\u00f6rleri</li> </ul> <p>\u00d6rnek:</p> <ul> <li>Bir motor 60 RPM h\u0131z\u0131nda d\u00f6n\u00fcyorsa, bu motorun her saniyede 1 tam d\u00f6n\u00fc\u015f yapt\u0131\u011f\u0131 anlam\u0131na gelir.</li> <li> <p>Bir robotun sol ve sa\u011f tekerlek h\u0131zlar\u0131 <code>[10, -10] RPM</code> olarak ayarland\u0131\u011f\u0131nda:</p> </li> <li> <p>Sol tekerlek 10 RPM ile ileri d\u00f6ner</p> </li> <li>Sa\u011f tekerlek -10 RPM ile geri d\u00f6ner \u2192 bu da robotun yerinde d\u00f6nmesini sa\u011flar</li> </ul> <p>Motor enkoderleri, motorlara ba\u011fl\u0131 olan ve milin d\u00f6n\u00fc\u015f\u00fcn\u00fc \u00f6l\u00e7en sens\u00f6rlerdir. Bu sayede motorun konumu, h\u0131z\u0131 ve d\u00f6n\u00fc\u015f y\u00f6n\u00fc hakk\u0131nda bilgi edinilebilir.</p> <p>Motor Enkoderleri Ne \u0130\u015fe Yarar?</p> <p>Motorun d\u00f6nme hareketini elektrik sinyallerine \u00e7evirir ve bu sinyaller bir mikrodenetleyici, motor s\u00fcr\u00fcc\u00fc ya da kontrol sistemi taraf\u0131ndan okunabilir.</p> <p>Enkoderler Neden \u00d6nemlidir?</p> <p>Geri bildirim (feedback) sa\u011flayarak:</p> <ul> <li>Motorun ne kadar d\u00f6nd\u00fc\u011f\u00fcn\u00fc anlayabiliriz (konum kontrol\u00fc)</li> <li>Ne kadar h\u0131zl\u0131 d\u00f6nd\u00fc\u011f\u00fcn\u00fc \u00f6l\u00e7ebiliriz (h\u0131z kontrol\u00fc)</li> <li>Robot, tekerlek, kol gibi sistemlerin kesin hareketlerini kontrol edebiliriz</li> <li>Kapal\u0131 \u00e7evrim kontrol (\u00f6rne\u011fin PID) sistemleri kurabiliriz</li> </ul> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <p>E\u011fer bir robot tekerle\u011fine ba\u011fl\u0131 enkoder 1 turda 1000 pulse \u00fcretiyorsa ve siz 500 pulse sayd\u0131ysan\u0131z, tekerlek yar\u0131m tur d\u00f6nm\u00fc\u015f demektir.</p>"},{"location":"how-to-guides/#diferansiyel-surus","title":"Diferansiyel s\u00fcr\u00fc\u015f","text":"<p>Diferansiyel s\u00fcr\u00fc\u015f, \u00f6zellikle karasal mobil robotlarda yayg\u0131n olarak kullan\u0131lan bir s\u00fcr\u00fc\u015f sistemidir. Bu sistemde robotun iki ba\u011f\u0131ms\u0131z tahrikli tekerle\u011fi bulunur (genellikle sol ve sa\u011f), ve robot bu tekerleklerin h\u0131z\u0131yla y\u00f6nlendirilir.</p> <p>Temel Kavram:</p> <p>Robot, sol ve sa\u011f tekerleklerin h\u0131z ve y\u00f6n fark\u0131na g\u00f6re hareket eder ve y\u00f6n de\u011fi\u015ftirir.</p> <p>Nas\u0131l \u00c7al\u0131\u015f\u0131r:</p> Sol Tekerlek Sa\u011f Tekerlek Robotun Hareketi \u0130leri \u0130leri D\u00fcz ileri gider Geri Geri D\u00fcz geri gider \u0130leri Durur Sa\u011fa d\u00f6ner (ekseni etraf\u0131nda) Durur \u0130leri Sola d\u00f6ner (ekseni etraf\u0131nda) \u0130leri Geri Yerinde d\u00f6ner (saat y\u00f6n\u00fc veya tersi) <p>Donan\u0131m Yap\u0131s\u0131:</p> <ul> <li>2 tahrikli tekerlek (sol ve sa\u011f)</li> <li>1 veya 2 yard\u0131mc\u0131 tekerlek (denge i\u00e7in, d\u00f6ner ama tahriksiz)</li> <li>Genellikle \u015fu sistemlerde kullan\u0131l\u0131r: i\u00e7 mek\u00e2n robotlar\u0131, robot s\u00fcp\u00fcrgeler, e\u011fitim robotlar\u0131, otomatik y\u00f6nlendirmeli ara\u00e7lar (AGV) vb.</li> </ul> <p>Avantajlar\u0131:</p> <ul> <li>Basit mekanik yap\u0131 ve kontrol</li> <li>D\u00fcz y\u00fczeylerde iyi performans</li> <li>Tekerlek enkoderleri ile hassas konum kontrol\u00fc yap\u0131labilir</li> </ul> <p>Dezavantajlar\u0131:</p> <ul> <li>Engebeli zeminlerde iyi \u00e7al\u0131\u015fmaz</li> <li>D\u00f6n\u00fc\u015fler kayarak yap\u0131l\u0131r (araba gibi direksiyonlu d\u00f6nemez)</li> </ul> <p>\u00d6rnek:</p> <ol> <li>Sol tekerlek 10 RPM h\u0131zla, sa\u011f tekerlek -10 RPM h\u0131zla d\u00f6nerse, robot yerinde d\u00f6ner.</li> </ol> <pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver()\norbit.set_rpm([10, 10])  #sa\u011f tekel fizksel ters -10 RPM yerine (-1 * -10) = 10 RPM\ntime.sleep(5)\norbit.stop()\n</code></pre> <ol> <li> <p>\u00c7ember \u015feklinde hareket etme: Bir diferansiyel s\u00fcr\u00fc\u015fl\u00fc robotun \u00e7ember \u015feklinde hareket etmesini sa\u011flamak i\u00e7in, sol ve sa\u011f tekerlekler ayn\u0131 y\u00f6nde fakat farkl\u0131 h\u0131zlarda d\u00f6nd\u00fcr\u00fclmelidir.</p> <ul> <li> <p>H\u0131z fark\u0131, robotun d\u00f6nece\u011fi \u00e7emberin yar\u0131\u00e7ap\u0131n\u0131 belirler.</p> </li> <li> <p>Robot, daha yava\u015f d\u00f6nen tekerlek y\u00f6n\u00fcne do\u011fru d\u00f6ner.</p> </li> </ul> <p><code>orbit.set_rpm([20, -10])</code></p> </li> <li> <p>Bir kare \u00e7izmek</p> </li> </ol> <pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver()\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rpm([10, 10])  #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rmp([10, 10]) #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rpm([10, 10])  #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rmp([10, 10]) #sag don\ntime.sleep(1)\n\norbit.stop()\n</code></pre> <p>for loop ile:</p> <pre><code>import time\nfrom orbitlab import OrbitDriver\nfor i in range(4):\n    orbit.set_rpm([10, -10]) #ileri git\n    time.sleep(2)\n    orbit.set_rpm([10, 10])  #sag don\n    time.sleep(1)\n\norbit.stop()\n</code></pre>"},{"location":"how-to-guides/#robot-hzn-okumak","title":"Robot h\u0131z\u0131n\u0131 okumak","text":"<p>\u00d6nceki uygulamalarda, robotun ne kadar mesafe kat etmesi gerekti\u011fini kontrol etmek i\u00e7in <code>time.sleep()</code> fonksiyonunu kulland\u0131k. Ancak bu y\u00f6ntem g\u00fcvenilir de\u011fildir; engeller, d\u00fczensiz y\u00fczeyler veya motorlardaki tutars\u0131zl\u0131klar gibi nedenlerle h\u0131zda meydana gelen de\u011fi\u015fiklikler, robotun ger\u00e7ekte kat etti\u011fi mesafede \u00f6nemli sapmalara yol a\u00e7abilir.</p> <p>Orbit robotu, her motorun ger\u00e7ek h\u0131z\u0131n\u0131 anl\u0131k olarak geri bildiren enkoderlerle donat\u0131lm\u0131\u015ft\u0131r. Bu sayede hareket kontrol\u00fc \u00e7ok daha hassas ve tutarl\u0131 bir \u015fekilde ger\u00e7ekle\u015ftirilebilir.</p> <p><code>orbitlab</code> k\u00fct\u00fcphanesini kullanarak robotun mevcut h\u0131z\u0131n\u0131 okumak i\u00e7in <code>speed</code> mod\u00fcl\u00fcnden faydalanabilirsiniz. Bu mod\u00fcl, sol ve sa\u011f motorlar\u0131n dakikadaki devir say\u0131s\u0131n\u0131 (RPM - rotations per minute) temsil eden iki tam say\u0131dan olu\u015fan bir liste d\u00f6nd\u00fcr\u00fcr:</p> <pre><code>sol_motor_rpm, sag_motor_rpm = orbit.speed()\n</code></pre> <p>Enkoder geri bildirimi kullanarak robot programlar\u0131n\u0131zda daha hassas mesafe ve h\u0131z kontrol\u00fc sa\u011flayabilirsiniz.</p> <p>\u00d6rnek:</p> <pre><code>import time\nfrom orbitlab import OrbitDriver\n\nzaman = 0.0\norbit = OrbitDriver()\n\norbit.set_rpm([10, 10])\n\nwhile zaman &lt;= 5.0:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    print(f\"Sol motor RPM: {sol_motor_rpm}, Sa\u011f motor RPM: {sag_motor_rpm}\")\n    time.sleep(0.5)\n    zaman += 0.5\n\norbit.stop()\n</code></pre>"},{"location":"how-to-guides/#diferansiyel-suruculu-robotta-dogrusal-ve-acsal-hzn-motor-rpm-degerine-donusturulmesi","title":"Diferansiyel S\u00fcr\u00fcc\u00fcl\u00fc Robotta Do\u011frusal ve A\u00e7\u0131sal H\u0131z\u0131n Motor RPM De\u011ferine D\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi","text":"<p>Bir diferansiyel tahrikli robotta hareket, sol ve sa\u011f tekerleklerin d\u00f6nme h\u0131zlar\u0131 ayarlanarak sa\u011flan\u0131r. Belirli bir do\u011frusal h\u0131z (ileri/geri hareket) ve a\u00e7\u0131sal h\u0131z (d\u00f6nme) elde etmek i\u00e7in, her motorun ne kadar h\u0131zl\u0131 d\u00f6nmesi gerekti\u011fini \u2014 yani RPM (dakikadaki devir say\u0131s\u0131) cinsinden \u2014 hesaplamam\u0131z gerekir.</p> <p>Bu d\u00f6n\u00fc\u015f\u00fcm, motor enkoderleriyle donat\u0131lm\u0131\u015f Orbit gibi robotlar i\u00e7in olduk\u00e7a \u00f6nemlidir. Sabit gecikmeler kullanmak yerine, ger\u00e7ek kinematik denklemlere dayanarak tekerlek h\u0131zlar\u0131n\u0131 hassas bir \u015fekilde komutland\u0131rabiliriz.</p> <p>Gerekli Parametreler:</p> <ul> <li>v: Robotun do\u011frusal h\u0131z\u0131 (m/s cinsinden)</li> <li>\u03c9: Robotun a\u00e7\u0131sal h\u0131z\u0131 (rad/s cinsinden)</li> <li>r: Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>L: \u0130ki tekerlek aras\u0131ndaki mesafe, yani dingil a\u00e7\u0131kl\u0131\u011f\u0131 (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li>Tekerleklerin Do\u011frusal H\u0131z\u0131n\u0131 Hesaplay\u0131n:</li> </ol> <p>Robotun hareketi iki tekerle\u011fe b\u00f6l\u00fcn\u00fcr:</p> <p>$$    v_L = v - \\frac{L}{2} \\cdot \\omega    $$</p> <p>$$    v_R = v + \\frac{L}{2} \\cdot \\omega    $$</p> <ul> <li> <p>$v_L$ ve $v_R$: Sol ve sa\u011f tekerleklerin do\u011frusal h\u0131zlar\u0131d\u0131r.</p> </li> <li> <p>Do\u011frusal H\u0131z\u0131 A\u00e7\u0131sal H\u0131za D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:</p> </li> </ul> <p>Motorlar d\u00f6ner hareket yapt\u0131\u011f\u0131 i\u00e7in tekerlek h\u0131z\u0131n\u0131 radyan/saniye (rad/s) cinsine \u00e7eviriyoruz:</p> <p>$$    \\omega_L = \\frac{v_L}{r}, \\quad \\omega_R = \\frac{v_R}{r}    $$</p> <ol> <li>A\u00e7\u0131sal H\u0131z\u0131 RPM\u2019ye D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:</li> </ol> <p>RPM (dakikadaki devir say\u0131s\u0131) elde etmek i\u00e7in:</p> <p>$$    RPM = \\omega \\cdot \\frac{60}{2\\pi}    $$</p> <p>Yani:</p> <p>$$    RPM_L = \\omega_L \\cdot \\frac{60}{2\\pi}, \\quad RPM_R = \\omega_R \\cdot \\frac{60}{2\\pi}    $$</p> <p>\u00d6rnek Python Fonksiyonu:</p> <p>Tekerlekler aras\u0131ndaki yar\u0131\u00e7ap ve mesafe <code>orbitlab</code> sabit de\u011ferlerinde bulunur.</p> <pre><code>import math\nfrom orbitlab import OrbitDriver\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef speed_to_rpm(v, omega, r, L):\n    v_l = v - (L / 2.0) * omega\n    v_r = v + (L / 2.0) * omega\n\n    omega_l = v_l / r\n    omega_r = v_r / r\n\n    rpm_l = omega_l * 60 / (2 * math.pi)\n    rpm_r = omega_r * 60 / (2 * math.pi)\n\n    return [rpm_l, rpm_r]\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <pre><code>rpm_degerleri = speed_to_rpm(v=0.3, omega=0.4, r=r, L=L)\nprint(\"Sol RPM:\", rpm_degerleri[0])\nprint(\"Sa\u011f RPM:\", rpm_degerleri[1])\n</code></pre>"},{"location":"how-to-guides/#sol-ve-sag-motor-rpm-degerlerinden-dogrusal-ve-acsal-hz-hesaplama","title":"Sol ve Sa\u011f Motor RPM De\u011ferlerinden Do\u011frusal ve A\u00e7\u0131sal H\u0131z Hesaplama","text":"<p>Bir diferansiyel tahrikli robotta, sol ve sa\u011f motorlar\u0131n RPM de\u011ferlerini kullanarak robotun ger\u00e7ek do\u011frusal (ileri/geri) ve a\u00e7\u0131sal (d\u00f6nme) h\u0131zlar\u0131n\u0131 hesaplamak m\u00fcmk\u00fcnd\u00fcr. Bu i\u015flem, ileri kinemati\u011fin tersidir.</p> <p>Verilen Parametreler:</p> <ul> <li>$\\text{RPM}_L$: Sol motorun RPM de\u011feri</li> <li>$\\text{RPM}_R$: Sa\u011f motorun RPM de\u011feri</li> <li>$r$: Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>$L$: \u0130ki tekerlek aras\u0131ndaki mesafe (dingil a\u00e7\u0131kl\u0131\u011f\u0131) (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li> <p>RPM\u2019yi a\u00e7\u0131sal h\u0131za \u00e7evirin (rad/s):</p> <p>$$ \\omega_L = \\text{RPM}_L \\cdot \\frac{2\\pi}{60} $$</p> <p>$$ \\omega_R = \\text{RPM}_R \\cdot \\frac{2\\pi}{60} $$</p> </li> <li> <p>A\u00e7\u0131sal h\u0131z\u0131 do\u011frusal h\u0131za \u00e7evirin:</p> <p>$$ v_L = \\omega_L \\cdot r $$</p> <p>$$ v_R = \\omega_R \\cdot r $$</p> </li> <li> <p>Robotun do\u011frusal ve a\u00e7\u0131sal h\u0131z\u0131n\u0131 hesaplay\u0131n:</p> <p>$$ v = \\frac{v_L + v_R}{2} $$</p> <p>$$ \\omega = \\frac{v_R - v_L}{L} $$</p> </li> </ol> <p>Python Kod \u00d6rne\u011fi:</p> <pre><code>import math\nfrom orbitlab import OrbitDriver\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef rpm_to_speed(rpm_l, rpm_r, r, L):\n    # 1. RPM \u2192 rad/s\n    omega_l = rpm_l * 2 * math.pi / 60\n    omega_r = rpm_r * 2 * math.pi / 60\n\n    # 2. rad/s \u2192 m/s\n    v_l = omega_l * r\n    v_r = omega_r * r\n\n    # 3. Robotun h\u0131zlar\u0131\n    v = (v_l + v_r) / 2\n    omega = (v_r - v_l) / L\n\n    return v, omega\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <pre><code>v, omega = rpm_to_speed(rpm_l=100, rpm_r=120, r=r, L=L)\nprint(f\"Do\u011frusal h\u0131z: {v:.2f} m/s\")\nprint(f\"A\u00e7\u0131sal h\u0131z: {omega:.2f} rad/s\")\n</code></pre> <p>Bu i\u015flem sayesinde, robotunuzun enkoderlerinden gelen RPM verilerini kullanarak robotun ger\u00e7ek hareketini (ileri gitme h\u0131z\u0131 ve d\u00f6n\u00fc\u015f h\u0131z\u0131) do\u011fru bir \u015fekilde \u00f6l\u00e7ebilirsiniz.</p> <p>Art\u0131k robotun motorlar\u0131ndan al\u0131nan ger\u00e7ek zamanl\u0131 RPM verilerini kullanarak, zamanla kat edilen mesafeyi hassas bir \u015fekilde hesaplayabiliriz. Bu y\u00f6ntem, zaman tabanl\u0131 tahminlere k\u0131yasla daha do\u011fru ve g\u00fcvenilir bir hareket takibi sa\u011flamak i\u00e7in enkoder geri bildiriminden yararlan\u0131r.</p> <p>\u00d6rnek:</p> <pre><code>from orbitlab import OrbitDriver\nimport time\nmesafe = 0.0\n\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, -10])\n\nwhile mesafe &lt;= 1.0:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    mesafe += v * 0.1\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre> <p>Robotun y\u00f6nelme a\u00e7\u0131s\u0131, a\u00e7\u0131sal h\u0131z\u0131n\u0131n ge\u00e7en zamanla \u00e7arp\u0131lmas\u0131yla hesaplanabilir. Bu y\u00f6ntem, zaman i\u00e7inde robotun y\u00f6nelimini tahmin etmek i\u00e7in basit fakat etkili bir yakla\u015f\u0131md\u0131r.</p> <p>\u00d6rnek:</p> <pre><code>from orbitlab import OrbitDriver\nimport math\nimport time\n\naci = 0.0\n\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, 10])\n\nwhile mesafe &lt;= math.pi/2:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    phi += omega * 0.1\n    phi = math.atan2(math.sin(phi), math.cos(phi))\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>orbit</code> project code.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit","title":"<code>Orbit</code>","text":"<p>               Bases: <code>OrbitWebsocketClient</code></p> <p>Initialize the Orbit robot client.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The IP address of the Orbit robot.</p> required"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.capture_image","title":"<code>capture_image()</code>","text":"<p>Capture the current image from the robot's camera </p> <p>Returns:</p> Name Type Description <code>image</code> <code>ndarray</code> <p>The captured image as a cv2 Mat object, or None if no image data is available.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.current","title":"<code>current()</code>","text":"<p>Get the current of the robot.</p> <p>Returns:</p> Name Type Description <code>current</code> <code>float</code> <p>Current in amperes (A).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.distance_value","title":"<code>distance_value()</code>","text":"<p>Get the distance traveled by the robot.</p> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>Distance in meters (m).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.encoder","title":"<code>encoder()</code>","text":"<p>Get the encoder values of the robot.</p> <p>Returns:</p> Name Type Description <code>encoder</code> <code>list</code> <p>A list of two encoder values [left_encoder, right_encoder].</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.ldr_value","title":"<code>ldr_value()</code>","text":"<p>Get the light-dependent resistor (LDR) value of the robot.</p> <p>Returns:</p> Name Type Description <code>ldr</code> <code>int</code> <p>LDR value as an integer.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.save_image","title":"<code>save_image()</code>","text":"<p>Save the current image from the robot's camera.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.speed","title":"<code>speed()</code>","text":"<p>Get the speed of the robot. Returns a list of two speed values.</p> <p>Returns:</p> Name Type Description <code>speed</code> <code>list</code> <p>A list of two speed values [left_speed, right_speed] in revolution per minute (RPM).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.temperature","title":"<code>temperature()</code>","text":"<p>Get the temperature of the robot.</p> <p>Returns:</p> Name Type Description <code>temperature</code> <code>float</code> <p>Temperature in degrees Celsius (\u00b0C).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.voltage","title":"<code>voltage()</code>","text":"<p>Get the voltage of the robot.</p> <p>Returns:</p> Name Type Description <code>voltage</code> <code>float</code> <p>Voltage in volts (V).</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient","title":"<code>OrbitWebsocketClient</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.change_face","title":"<code>change_face(face_id)</code>","text":"<p>Change the robot's facial expression.</p> <p>Parameters:</p> Name Type Description Default <code>face_id</code> <code>FaceId</code> <p>An instance of the FaceId enum representing the desired facial expression</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.dance","title":"<code>dance(song_name)</code>","text":"<p>Make the robot dance to a predefined song.</p> <p>Parameters:</p> Name Type Description Default <code>song_name</code> <code>str</code> <p>The name of the song to dance to.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.head_calibration","title":"<code>head_calibration()</code>","text":"<p>Calibrate the head position of the robot.</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.move_backward","title":"<code>move_backward(distance)</code>","text":"<p>Move the robot backward by a specified distance.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>The distance in meters to move backward.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.move_forward","title":"<code>move_forward(distance)</code>","text":"<p>Move the robot forward by a specified distance.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>The distance in meters to move forward.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.play_song","title":"<code>play_song(song_name)</code>","text":"<p>Play a predefined song on the robot.</p> <p>Parameters:</p> Name Type Description Default <code>song_name</code> <code>str</code> <p>The name of the song to be played.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_head_pose","title":"<code>set_head_pose(pose)</code>","text":"<p>Set the head pose of the robot.</p> <p>Parameters:</p> Name Type Description Default <code>pose</code> <code>list</code> <p>A list of two float values representing the head cordinates [x, y]</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_led_animation","title":"<code>set_led_animation(animation_type, rgb)</code>","text":"<p>Set the LED animation on the robot.</p> <p>Parameters:</p> Name Type Description Default <code>animation_type</code> <code>int</code> <p>The type of LED animation (0-5).</p> required <code>rgb</code> <code>list</code> <p>A list of three integer values representing the RGB color [R, G, B].</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_rgb","title":"<code>set_rgb(rgb)</code>","text":"<p>Set the RGB color of the robot's LED.</p> <p>Parameters:</p> Name Type Description Default <code>rgb</code> <code>list</code> <p>A list of three integer values representing the RGB color [R, G, B].</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_rpm","title":"<code>set_rpm(rpm)</code>","text":"<p>Set the RPM of the robot's wheels.</p> <p>Parameters:</p> Name Type Description Default <code>rpm</code> <code>list</code> <p>A list of two integer values [left_rpm, right_rpm]</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.stop","title":"<code>stop()</code>","text":"<p>Stop the client and close the connection.</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.text_to_speech","title":"<code>text_to_speech(text, block=True)</code>","text":"<p>Send a text to the robot to speak.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the robot.</p> required <code>block</code> <code>bool</code> <p>If True, wait for the service to complete before returning.</p> <code>True</code>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.turn_left","title":"<code>turn_left(angle)</code>","text":"<p>Turn the robot left by a specified angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle in degrees to turn left.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.turn_right","title":"<code>turn_right(angle)</code>","text":"<p>Turn the robot right by a specified angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle in degrees to turn right.</p> required"},{"location":"reference/#src.orbitlab.orbit_utils.face_ids.FaceId","title":"<code>FaceId</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for predefined face IDs.</p> <p>Attributes:</p> Name Type Description <code>BRINKING</code> <code>int</code> <p>Face ID for \"BRINKING\".</p> <code>BREATHE</code> <code>int</code> <p>Face ID for \"BREATHE\".</p> <code>COMPASSION</code> <code>int</code> <p>Face ID for \"COMPASSION\".</p> <code>CURIOUS</code> <code>int</code> <p>Face ID for \"CURIOUS\".</p> <code>ERROR</code> <code>int</code> <p>Face ID for \"ERROR\".</p> <code>HEART_EYES</code> <code>int</code> <p>Face ID for \"HEART_EYES\".</p> <code>HELLO</code> <code>int</code> <p>Face ID for \"HELLO\".</p> <code>LOADING</code> <code>int</code> <p>Face ID for \"LOADING\".</p> <code>PLAYFUL</code> <code>int</code> <p>Face ID for \"PLAYFUL\".</p> <code>SHY</code> <code>int</code> <p>Face ID for \"SHY\".</p> <code>STAR_EYES</code> <code>int</code> <p>Face ID for \"STAR_EYES\".</p> <code>SURPRISED</code> <code>int</code> <p>Face ID for \"SURPRISED\".</p> <code>THANK_YOU</code> <code>int</code> <p>Face ID for \"THANK_YOU\".</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}
{"config":{"lang":["tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ana Sayfa","text":"<p>Bu b\u00f6l\u00fcm, Orbit Python k\u00fct\u00fcphanesini ve Python ile robotik programlaman\u0131n temellerini tan\u0131tmaktad\u0131r.  Robot alg\u0131s\u0131, karar verme ve kontrol gibi temel kavramlar\u0131 \u00f6\u011freneceksiniz. K\u00fct\u00fcphane,  Orbit robotlar\u0131 i\u00e7in bir Python API\u2019si sunar ve robotu Python soketi arac\u0131l\u0131\u011f\u0131yla kontrol  etmenizi sa\u011flar.</p> <p></p>"},{"location":"#icindekiler","title":"\u0130\u00e7indekiler","text":"<ol> <li>Ba\u015flarken</li> <li>Robotik programlama</li> <li>Orbit AI</li> <li>API Referans\u0131</li> </ol>"},{"location":"#tesekkurler","title":"Te\u015fekk\u00fcrler","text":"<p>Bu k\u00fct\u00fcphanenin geli\u015ftirilmesine katk\u0131da bulunan a\u00e7\u0131k kaynak toplulu\u011funa ve Orbit ekibine te\u015fekk\u00fcr  ederiz.</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"getting-started/","title":"Ba\u015flarken","text":"<p>Bu yaz\u0131l\u0131m, Orbit robotunu yerel a\u011f \u00fczerinden Python ile kontrol etmek i\u00e7in geli\u015ftirilmi\u015ftir.  Temel amac\u0131, \u00f6\u011frencilerin fiziksel bir robotla etkile\u015fim kurarak robotik programlama konusunda  uygulamal\u0131 deneyim kazanmalar\u0131n\u0131 sa\u011flamakt\u0131r. K\u00fct\u00fcphane, Orbit platformunun temel i\u015flevlerini  sunar: motor kontrol\u00fc, sens\u00f6r verilerine eri\u015fim, robot y\u00fcz ifadesinin de\u011fi\u015ftirilmesi,  ses \u00e7alma, LDR (\u0131\u015f\u0131\u011fa duyarl\u0131 diren\u00e7) ayar\u0131 ve daha fazlas\u0131. Bu sayede kapsaml\u0131 ve pratik  bir \u00f6\u011frenme deneyimi sunar. Ayn\u0131 zamanda da simulasyon \u00f6zelli\u011fi sahiptir.</p>"},{"location":"getting-started/#yazlm-gereksinimleri","title":"Yaz\u0131l\u0131m gereksinimleri","text":"<ol> <li>Orbit robot: Daha fazla bilgi i\u00e7in Orbitrobots ziyaret edin</li> <li>Python &gt;= 3.0: Python'u indirin Python</li> </ol>"},{"location":"getting-started/#kurulum","title":"Kurulum","text":"<pre><code>pip install orbitlab-python\n</code></pre>"},{"location":"getting-started/#kullanm-ornegi","title":"Kullan\u0131m \u00f6rne\u011fi","text":"<p>Orbitlab-python'u kurduktan sonra, bilgisayar\u0131n\u0131z\u0131n robotla ayn\u0131 a\u011fa ba\u011fl\u0131 oldu\u011fundan emin olun.  Robotun IP adresini ekran\u0131ndan al\u0131n.</p> <pre><code>import time\nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;orbit_ip_address&gt;\")\n\norbit.set_rpm([10, -10])\ntime.sleep(5)\norbit.stop()\n</code></pre> <p>Bu \u00f6rnekte, robotu 5 saniye boyunca 10 RPM h\u0131zla hareket ettirdik.</p> <p>Dikkat</p> <p>Robottan g\u00fcvenli bir \u015fekilde ba\u011flant\u0131y\u0131 kesmek i\u00e7in program\u0131n\u0131z\u0131n sonunda <code>orbit.stop()</code>  fonksiyonunu her zaman \u00e7a\u011f\u0131r\u0131n.</p>"},{"location":"how-to-guides/","title":"Orbitlab Python library","text":"<p>Bu yaz\u0131l\u0131m, Orbit robotunu yerel a\u011f \u00fczerinden Python ile kontrol etmek i\u00e7in geli\u015ftirilmi\u015ftir. Temel amac\u0131, \u00f6\u011frencilerin fiziksel bir robotla etkile\u015fim kurarak robotik programlama konusunda uygulamal\u0131 deneyim kazanmalar\u0131n\u0131 sa\u011flamakt\u0131r. K\u00fct\u00fcphane, Orbit platformunun temel i\u015flevlerini sunar: motor kontrol\u00fc, sens\u00f6r verilerine eri\u015fim, robot y\u00fcz ifadesinin de\u011fi\u015ftirilmesi, ses \u00e7alma, LDR (\u0131\u015f\u0131\u011fa duyarl\u0131 diren\u00e7) ayar\u0131 ve daha fazlas\u0131. Bu sayede kapsaml\u0131 ve pratik bir \u00f6\u011frenme deneyimi sunar. Ayn\u0131 zamanda da simulasyon \u00f6zelli\u011fi sahiptir.</p>"},{"location":"how-to-guides/#yazlm-gereksinimleri","title":"Yaz\u0131l\u0131m gereksinimleri","text":"<ol> <li>Orbit robot: Daha fazla bilgi i\u00e7in Orbitrobots ziyaret edin</li> <li>Python &gt;= 3.0: Python'u indirin Python</li> </ol>"},{"location":"how-to-guides/#kurulum","title":"Kurulum","text":"<pre><code>pip install orbitlab\n</code></pre>"},{"location":"how-to-guides/#kullanm-ornegi","title":"Kullan\u0131m \u00f6rne\u011fi","text":"<pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver(\"&lt;orbit_ip_address&gt;\")\n\norbit.set_rpm([10, -10])\ntime.sleep(5)\norbit.stop()\n</code></pre> <ol> <li> <p><code>import time</code></p> </li> <li> <p>Program\u0131n belirli bir s\u00fcre duraklamas\u0131n\u0131 sa\u011flamak i\u00e7in Python\u2019un yerle\u015fik time mod\u00fcl\u00fcn\u00fc i\u00e7e aktar\u0131r.</p> </li> <li> <p><code>from orbitlab import OrbitDriver</code></p> </li> <li> <p>Orbit robotunu kontrol etmek i\u00e7in kullan\u0131lan \u00f6zel OrbitDriver s\u0131n\u0131f\u0131n\u0131 i\u00e7e aktar\u0131r.</p> </li> <li> <p><code>orbit = OrbitDriver(\"&lt;orbit_ip_address&gt;\")</code></p> </li> <li> <p>Orbit robotuna yerel a\u011f \u00fczerinden ba\u011flant\u0131 kurar.</p> </li> <li> <p><code>\"&lt;orbit_ip_address&gt;\"</code> k\u0131sm\u0131 robotun ger\u00e7ek IP adresiyle (\u00f6rne\u011fin \"192.168.1.42\") de\u011fi\u015ftirilmelidir.</p> </li> <li> <p><code>orbit.set_rpm([10, -10])</code></p> </li> <li> <p>Motorlara RPM komutu g\u00f6nderir:</p> <ul> <li> <p>Sol tekerlek: 10 RPM (ileri)</p> </li> <li> <p>Sa\u011f tekerlek: -10 RPM</p> </li> </ul> </li> <li> <p>Bu durumda, sa\u011f motor fiziksel olarak ters ba\u011fland\u0131\u011f\u0131 i\u00e7in -10 RPM komutu da onu ileri y\u00f6nde hareket ettirir.</p> </li> <li> <p>Sonu\u00e7 olarak, her iki tekerlek de ileri ayn\u0131 h\u0131zda hareket eder ve robot d\u00fcz bir \u015fekilde ileri gider (d\u00f6nme yapmaz).</p> </li> <li> <p><code>time.sleep(5)</code></p> </li> <li> <p>Robotun 5 saniye boyunca hareket etmeye devam etmesini sa\u011flar.</p> </li> <li> <p><code>orbit.stop()</code></p> </li> <li> <p>Her iki motoru da durdurarak robotu durdurur.</p> </li> </ol>"},{"location":"how-to-guides/#rpm-ve-enkoderleri-anlamak","title":"RPM ve Enkoderleri Anlamak.","text":"<p>RPM, dakikadaki devir say\u0131s\u0131 anlam\u0131na gelen \"Revolutions Per Minute\" ifadesinin k\u0131saltmas\u0131d\u0131r.</p> <p>Bu, d\u00f6nen bir nesnenin bir dakikada ka\u00e7 tam tur att\u0131\u011f\u0131n\u0131 g\u00f6steren d\u00f6nme h\u0131z\u0131 birimidir. Genellikle a\u015fa\u011f\u0131daki gibi d\u00f6nen cihazlar\u0131n h\u0131z\u0131n\u0131 tan\u0131mlamak i\u00e7in kullan\u0131l\u0131r:</p> <ul> <li>Motorlar (\u00f6rne\u011fin: bir DC motorun 3000 RPM\u2019de d\u00f6nmesi)</li> <li>Tekerlekler</li> <li>Fanlar</li> <li>Sabit diskler</li> <li>Robot akt\u00fcat\u00f6rleri</li> </ul> <p>\u00d6rnek:</p> <ul> <li>Bir motor 60 RPM h\u0131z\u0131nda d\u00f6n\u00fcyorsa, bu motorun her saniyede 1 tam d\u00f6n\u00fc\u015f yapt\u0131\u011f\u0131 anlam\u0131na gelir.</li> <li> <p>Bir robotun sol ve sa\u011f tekerlek h\u0131zlar\u0131 <code>[10, -10] RPM</code> olarak ayarland\u0131\u011f\u0131nda:</p> </li> <li> <p>Sol tekerlek 10 RPM ile ileri d\u00f6ner</p> </li> <li>Sa\u011f tekerlek -10 RPM ile geri d\u00f6ner \u2192 bu da robotun yerinde d\u00f6nmesini sa\u011flar</li> </ul> <p>Motor enkoderleri, motorlara ba\u011fl\u0131 olan ve milin d\u00f6n\u00fc\u015f\u00fcn\u00fc \u00f6l\u00e7en sens\u00f6rlerdir. Bu sayede motorun konumu, h\u0131z\u0131 ve d\u00f6n\u00fc\u015f y\u00f6n\u00fc hakk\u0131nda bilgi edinilebilir.</p> <p>Motor Enkoderleri Ne \u0130\u015fe Yarar?</p> <p>Motorun d\u00f6nme hareketini elektrik sinyallerine \u00e7evirir ve bu sinyaller bir mikrodenetleyici, motor s\u00fcr\u00fcc\u00fc ya da kontrol sistemi taraf\u0131ndan okunabilir.</p> <p>Enkoderler Neden \u00d6nemlidir?</p> <p>Geri bildirim (feedback) sa\u011flayarak:</p> <ul> <li>Motorun ne kadar d\u00f6nd\u00fc\u011f\u00fcn\u00fc anlayabiliriz (konum kontrol\u00fc)</li> <li>Ne kadar h\u0131zl\u0131 d\u00f6nd\u00fc\u011f\u00fcn\u00fc \u00f6l\u00e7ebiliriz (h\u0131z kontrol\u00fc)</li> <li>Robot, tekerlek, kol gibi sistemlerin kesin hareketlerini kontrol edebiliriz</li> <li>Kapal\u0131 \u00e7evrim kontrol (\u00f6rne\u011fin PID) sistemleri kurabiliriz</li> </ul> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <p>E\u011fer bir robot tekerle\u011fine ba\u011fl\u0131 enkoder 1 turda 1000 pulse \u00fcretiyorsa ve siz 500 pulse sayd\u0131ysan\u0131z, tekerlek yar\u0131m tur d\u00f6nm\u00fc\u015f demektir.</p>"},{"location":"how-to-guides/#diferansiyel-surus","title":"Diferansiyel s\u00fcr\u00fc\u015f","text":"<p>Diferansiyel s\u00fcr\u00fc\u015f, \u00f6zellikle karasal mobil robotlarda yayg\u0131n olarak kullan\u0131lan bir s\u00fcr\u00fc\u015f sistemidir. Bu sistemde robotun iki ba\u011f\u0131ms\u0131z tahrikli tekerle\u011fi bulunur (genellikle sol ve sa\u011f), ve robot bu tekerleklerin h\u0131z\u0131yla y\u00f6nlendirilir.</p> <p>Temel Kavram:</p> <p>Robot, sol ve sa\u011f tekerleklerin h\u0131z ve y\u00f6n fark\u0131na g\u00f6re hareket eder ve y\u00f6n de\u011fi\u015ftirir.</p> <p>Nas\u0131l \u00c7al\u0131\u015f\u0131r:</p> Sol Tekerlek Sa\u011f Tekerlek Robotun Hareketi \u0130leri \u0130leri D\u00fcz ileri gider Geri Geri D\u00fcz geri gider \u0130leri Durur Sa\u011fa d\u00f6ner (ekseni etraf\u0131nda) Durur \u0130leri Sola d\u00f6ner (ekseni etraf\u0131nda) \u0130leri Geri Yerinde d\u00f6ner (saat y\u00f6n\u00fc veya tersi) <p>Donan\u0131m Yap\u0131s\u0131:</p> <ul> <li>2 tahrikli tekerlek (sol ve sa\u011f)</li> <li>1 veya 2 yard\u0131mc\u0131 tekerlek (denge i\u00e7in, d\u00f6ner ama tahriksiz)</li> <li>Genellikle \u015fu sistemlerde kullan\u0131l\u0131r: i\u00e7 mek\u00e2n robotlar\u0131, robot s\u00fcp\u00fcrgeler, e\u011fitim robotlar\u0131, otomatik y\u00f6nlendirmeli ara\u00e7lar (AGV) vb.</li> </ul> <p>Avantajlar\u0131:</p> <ul> <li>Basit mekanik yap\u0131 ve kontrol</li> <li>D\u00fcz y\u00fczeylerde iyi performans</li> <li>Tekerlek enkoderleri ile hassas konum kontrol\u00fc yap\u0131labilir</li> </ul> <p>Dezavantajlar\u0131:</p> <ul> <li>Engebeli zeminlerde iyi \u00e7al\u0131\u015fmaz</li> <li>D\u00f6n\u00fc\u015fler kayarak yap\u0131l\u0131r (araba gibi direksiyonlu d\u00f6nemez)</li> </ul> <p>\u00d6rnek:</p> <ol> <li>Sol tekerlek 10 RPM h\u0131zla, sa\u011f tekerlek -10 RPM h\u0131zla d\u00f6nerse, robot yerinde d\u00f6ner.</li> </ol> <pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver()\norbit.set_rpm([10, 10])  #sa\u011f tekel fizksel ters -10 RPM yerine (-1 * -10) = 10 RPM\ntime.sleep(5)\norbit.stop()\n</code></pre> <ol> <li> <p>\u00c7ember \u015feklinde hareket etme: Bir diferansiyel s\u00fcr\u00fc\u015fl\u00fc robotun \u00e7ember \u015feklinde hareket etmesini sa\u011flamak i\u00e7in, sol ve sa\u011f tekerlekler ayn\u0131 y\u00f6nde fakat farkl\u0131 h\u0131zlarda d\u00f6nd\u00fcr\u00fclmelidir.</p> <ul> <li> <p>H\u0131z fark\u0131, robotun d\u00f6nece\u011fi \u00e7emberin yar\u0131\u00e7ap\u0131n\u0131 belirler.</p> </li> <li> <p>Robot, daha yava\u015f d\u00f6nen tekerlek y\u00f6n\u00fcne do\u011fru d\u00f6ner.</p> </li> </ul> <p><code>orbit.set_rpm([20, -10])</code></p> </li> <li> <p>Bir kare \u00e7izmek <pre><code>import time\nfrom orbitlab import OrbitDriver\n\norbit = OrbitDriver()\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rpm([10, 10])  #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rmp([10, 10]) #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rpm([10, 10])  #sag don\ntime.sleep(1)\norbit.set_rpm([10, -10]) #ileri git\ntime.sleep(2)\norbit.set_rmp([10, 10]) #sag don\ntime.sleep(1)\n\norbit.stop()\n</code></pre></p> </li> </ol> <p>for loop ile: <pre><code>import time\nfrom orbitlab import OrbitDriver\nfor i in range(4):\n    orbit.set_rpm([10, -10]) #ileri git\n    time.sleep(2)\n    orbit.set_rpm([10, 10])  #sag don\n    time.sleep(1)\n\norbit.stop()\n</code></pre></p>"},{"location":"how-to-guides/#robot-hzn-okumak","title":"Robot h\u0131z\u0131n\u0131 okumak","text":"<p>\u00d6nceki uygulamalarda, robotun ne kadar mesafe kat etmesi gerekti\u011fini kontrol etmek i\u00e7in <code>time.sleep()</code> fonksiyonunu kulland\u0131k. Ancak bu y\u00f6ntem g\u00fcvenilir de\u011fildir; engeller, d\u00fczensiz y\u00fczeyler veya motorlardaki tutars\u0131zl\u0131klar gibi nedenlerle h\u0131zda meydana gelen de\u011fi\u015fiklikler, robotun ger\u00e7ekte kat etti\u011fi mesafede \u00f6nemli sapmalara yol a\u00e7abilir.</p> <p>Orbit robotu, her motorun ger\u00e7ek h\u0131z\u0131n\u0131 anl\u0131k olarak geri bildiren enkoderlerle donat\u0131lm\u0131\u015ft\u0131r. Bu sayede hareket kontrol\u00fc \u00e7ok daha hassas ve tutarl\u0131 bir \u015fekilde ger\u00e7ekle\u015ftirilebilir.</p> <p><code>orbitlab</code> k\u00fct\u00fcphanesini kullanarak robotun mevcut h\u0131z\u0131n\u0131 okumak i\u00e7in <code>speed</code> mod\u00fcl\u00fcnden faydalanabilirsiniz. Bu mod\u00fcl, sol ve sa\u011f motorlar\u0131n dakikadaki devir say\u0131s\u0131n\u0131 (RPM - rotations per minute) temsil eden iki tam say\u0131dan olu\u015fan bir liste d\u00f6nd\u00fcr\u00fcr:</p> <pre><code>sol_motor_rpm, sag_motor_rpm = orbit.speed()\n</code></pre> <p>Enkoder geri bildirimi kullanarak robot programlar\u0131n\u0131zda daha hassas mesafe ve h\u0131z kontrol\u00fc sa\u011flayabilirsiniz.</p> <p>\u00d6rnek:</p> <pre><code>import time\nfrom orbitlab import OrbitDriver\n\nzaman = 0.0\norbit = OrbitDriver()\n\norbit.set_rpm([10, 10])\n\nwhile zaman &lt;= 5.0:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    print(f\"Sol motor RPM: {sol_motor_rpm}, Sa\u011f motor RPM: {sag_motor_rpm}\")\n    time.sleep(0.5)\n    zaman += 0.5\n\norbit.stop()\n</code></pre>"},{"location":"how-to-guides/#diferansiyel-suruculu-robotta-dogrusal-ve-acsal-hzn-motor-rpm-degerine-donusturulmesi","title":"Diferansiyel S\u00fcr\u00fcc\u00fcl\u00fc Robotta Do\u011frusal ve A\u00e7\u0131sal H\u0131z\u0131n Motor RPM De\u011ferine D\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi","text":"<p>Bir diferansiyel tahrikli robotta hareket, sol ve sa\u011f tekerleklerin d\u00f6nme h\u0131zlar\u0131 ayarlanarak sa\u011flan\u0131r. Belirli bir do\u011frusal h\u0131z (ileri/geri hareket) ve a\u00e7\u0131sal h\u0131z (d\u00f6nme) elde etmek i\u00e7in, her motorun ne kadar h\u0131zl\u0131 d\u00f6nmesi gerekti\u011fini \u2014 yani RPM (dakikadaki devir say\u0131s\u0131) cinsinden \u2014 hesaplamam\u0131z gerekir.</p> <p>Bu d\u00f6n\u00fc\u015f\u00fcm, motor enkoderleriyle donat\u0131lm\u0131\u015f Orbit gibi robotlar i\u00e7in olduk\u00e7a \u00f6nemlidir. Sabit gecikmeler kullanmak yerine, ger\u00e7ek kinematik denklemlere dayanarak tekerlek h\u0131zlar\u0131n\u0131 hassas bir \u015fekilde komutland\u0131rabiliriz.</p> <p>Gerekli Parametreler:</p> <ul> <li>v: Robotun do\u011frusal h\u0131z\u0131 (m/s cinsinden)</li> <li>\u03c9: Robotun a\u00e7\u0131sal h\u0131z\u0131 (rad/s cinsinden)</li> <li>r: Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>L: \u0130ki tekerlek aras\u0131ndaki mesafe, yani dingil a\u00e7\u0131kl\u0131\u011f\u0131 (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li>Tekerleklerin Do\u011frusal H\u0131z\u0131n\u0131 Hesaplay\u0131n:</li> </ol> <p>Robotun hareketi iki tekerle\u011fe b\u00f6l\u00fcn\u00fcr:</p> <p>$$    v_L = v - \\frac{L}{2} \\cdot \\omega    $$</p> <p>$$    v_R = v + \\frac{L}{2} \\cdot \\omega    $$</p> <ul> <li> <p>\\(v_L\\) ve \\(v_R\\): Sol ve sa\u011f tekerleklerin do\u011frusal h\u0131zlar\u0131d\u0131r.</p> </li> <li> <p>Do\u011frusal H\u0131z\u0131 A\u00e7\u0131sal H\u0131za D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:</p> </li> </ul> <p>Motorlar d\u00f6ner hareket yapt\u0131\u011f\u0131 i\u00e7in tekerlek h\u0131z\u0131n\u0131 radyan/saniye (rad/s) cinsine \u00e7eviriyoruz:</p> <p>$$    \\omega_L = \\frac{v_L}{r}, \\quad \\omega_R = \\frac{v_R}{r}    $$</p> <ol> <li>A\u00e7\u0131sal H\u0131z\u0131 RPM\u2019ye D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:</li> </ol> <p>RPM (dakikadaki devir say\u0131s\u0131) elde etmek i\u00e7in:</p> <p>$$    RPM = \\omega \\cdot \\frac{60}{2\\pi}    $$</p> <p>Yani:</p> <p>$$    RPM_L = \\omega_L \\cdot \\frac{60}{2\\pi}, \\quad RPM_R = \\omega_R \\cdot \\frac{60}{2\\pi}    $$</p> <p>\u00d6rnek Python Fonksiyonu:</p> <p>Tekerlekler aras\u0131ndaki yar\u0131\u00e7ap ve mesafe <code>orbitlab</code> sabit de\u011ferlerinde bulunur.</p> <pre><code>import math\nfrom orbitlab import OrbitDriver\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef speed_to_rpm(v, omega, r, L):\n    v_l = v - (L / 2.0) * omega\n    v_r = v + (L / 2.0) * omega\n\n    omega_l = v_l / r\n    omega_r = v_r / r\n\n    rpm_l = omega_l * 60 / (2 * math.pi)\n    rpm_r = omega_r * 60 / (2 * math.pi)\n\n    return [rpm_l, rpm_r]\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p>"},{"location":"how-to-guides/#1-2-3rpm_degerleri-speed_to_rpmv03-omega04-rr-ll-printsol-rpm-rpm_degerleri0-printsag-rpm-rpm_degerleri1","title":"<pre><code>rpm_degerleri = speed_to_rpm(v=0.3, omega=0.4, r=r, L=L)\nprint(\"Sol RPM:\", rpm_degerleri[0])\nprint(\"Sa\u011f RPM:\", rpm_degerleri[1])\n</code></pre>","text":""},{"location":"how-to-guides/#sol-ve-sag-motor-rpm-degerlerinden-dogrusal-ve-acsal-hz-hesaplama","title":"Sol ve Sa\u011f Motor RPM De\u011ferlerinden Do\u011frusal ve A\u00e7\u0131sal H\u0131z Hesaplama","text":"<p>Bir diferansiyel tahrikli robotta, sol ve sa\u011f motorlar\u0131n RPM de\u011ferlerini kullanarak robotun ger\u00e7ek do\u011frusal (ileri/geri) ve a\u00e7\u0131sal (d\u00f6nme) h\u0131zlar\u0131n\u0131 hesaplamak m\u00fcmk\u00fcnd\u00fcr. Bu i\u015flem, ileri kinemati\u011fin tersidir.</p> <p>Verilen Parametreler:</p> <ul> <li>\\(\\text{RPM}_L\\): Sol motorun RPM de\u011feri</li> <li>\\(\\text{RPM}_R\\): Sa\u011f motorun RPM de\u011feri</li> <li>\\(r\\): Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>\\(L\\): \u0130ki tekerlek aras\u0131ndaki mesafe (dingil a\u00e7\u0131kl\u0131\u011f\u0131) (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li> <p>RPM\u2019yi a\u00e7\u0131sal h\u0131za \u00e7evirin (rad/s):</p> \\[ \\omega_L = \\text{RPM}_L \\cdot \\frac{2\\pi}{60} \\] \\[ \\omega_R = \\text{RPM}_R \\cdot \\frac{2\\pi}{60} \\] </li> <li> <p>A\u00e7\u0131sal h\u0131z\u0131 do\u011frusal h\u0131za \u00e7evirin:</p> \\[ v_L = \\omega_L \\cdot r \\] \\[ v_R = \\omega_R \\cdot r \\] </li> <li> <p>Robotun do\u011frusal ve a\u00e7\u0131sal h\u0131z\u0131n\u0131 hesaplay\u0131n:</p> \\[ v = \\frac{v_L + v_R}{2} \\] \\[ \\omega = \\frac{v_R - v_L}{L} \\] </li> </ol> <p>Python Kod \u00d6rne\u011fi:</p> <pre><code>import math\nfrom orbitlab import OrbitDriver\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef rpm_to_speed(rpm_l, rpm_r, r, L):\n    # 1. RPM \u2192 rad/s\n    omega_l = rpm_l * 2 * math.pi / 60\n    omega_r = rpm_r * 2 * math.pi / 60\n\n    # 2. rad/s \u2192 m/s\n    v_l = omega_l * r\n    v_r = omega_r * r\n\n    # 3. Robotun h\u0131zlar\u0131\n    v = (v_l + v_r) / 2\n    omega = (v_r - v_l) / L\n\n    return v, omega\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <pre><code>v, omega = rpm_to_speed(rpm_l=100, rpm_r=120, r=r, L=L)\nprint(f\"Do\u011frusal h\u0131z: {v:.2f} m/s\")\nprint(f\"A\u00e7\u0131sal h\u0131z: {omega:.2f} rad/s\")\n</code></pre> <p>Bu i\u015flem sayesinde, robotunuzun enkoderlerinden gelen RPM verilerini kullanarak robotun ger\u00e7ek hareketini (ileri gitme h\u0131z\u0131 ve d\u00f6n\u00fc\u015f h\u0131z\u0131) do\u011fru bir \u015fekilde \u00f6l\u00e7ebilirsiniz.</p> <p>Art\u0131k robotun motorlar\u0131ndan al\u0131nan ger\u00e7ek zamanl\u0131 RPM verilerini kullanarak, zamanla kat edilen mesafeyi hassas bir \u015fekilde hesaplayabiliriz. Bu y\u00f6ntem, zaman tabanl\u0131 tahminlere k\u0131yasla daha do\u011fru ve g\u00fcvenilir bir hareket takibi sa\u011flamak i\u00e7in enkoder geri bildiriminden yararlan\u0131r.</p> <p>\u00d6rnek: <pre><code>from orbitlab import OrbitDriver\nimport time\nmesafe = 0.0\n\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, -10])\n\nwhile mesafe &lt;= 1.0:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    mesafe += v * 0.1\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre></p> <p>Robotun y\u00f6nelme a\u00e7\u0131s\u0131, a\u00e7\u0131sal h\u0131z\u0131n\u0131n ge\u00e7en zamanla \u00e7arp\u0131lmas\u0131yla hesaplanabilir. Bu y\u00f6ntem, zaman i\u00e7inde robotun y\u00f6nelimini tahmin etmek i\u00e7in basit fakat etkili bir yakla\u015f\u0131md\u0131r.</p> <p>\u00d6rnek: <pre><code>from orbitlab import OrbitDriver\nimport math\nimport time\n\naci = 0.0\n\norbit = OrbitDriver()\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, 10])\n\nwhile mesafe &lt;= math.pi/2:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    phi += omega * 0.1\n    phi = math.atan2(math.sin(phi), math.cos(phi))\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre></p>"},{"location":"orbit-ai/","title":"Orbit AI","text":"<p>Orbit robotu, B\u00fcy\u00fck Dil Modelleri (LLM), G\u00f6r\u00fcnt\u00fc \u0130\u015fleme (Computer Vision) ve Konu\u015fmadan Metne  / Metinden Konu\u015fmaya (Speech-to-Text / Text-to-Speech) gibi yapay zek\u00e2 \u00f6zelliklerini destekler.  Ancak, Orbit Python k\u00fct\u00fcphanesi \u015fu anda yaln\u0131zca Metinden Konu\u015fmaya ve G\u00f6r\u00fcnt\u00fc \u0130\u015fleme  \u00f6zelliklerini desteklemektedir. Bu b\u00f6l\u00fcmde, \u00f6zellikle G\u00f6r\u00fcnt\u00fc \u0130\u015fleme\u2019ye odaklanarak Orbit  AI\u2019nin nas\u0131l kullan\u0131laca\u011f\u0131n\u0131 inceleyece\u011fiz.</p> <p></p>"},{"location":"orbit-ai/#text-to-speech","title":"Text-to-Speech","text":"<p>Orbit robotunda yerle\u015fik bir Metinden Konu\u015fmaya (Text-to-Speech) modeli bulunmaktad\u0131r. Yapman\u0131z  gereken tek \u015fey <code>text_to_speech</code> fonksiyonunu \u00e7a\u011f\u0131rmakt\u0131r.</p> <p>\u00d6rnek:</p> <pre><code>from orbitlab import Orbit\n\norbit = Orbit(\"ip-address\")\n\norbit.text_to_speech(\"Merhaba, benim ad\u0131m orbit.\")\n\norbit.stop()\n</code></pre>"},{"location":"orbit-ai/#goruntu-isleme","title":"G\u00f6r\u00fcnt\u00fc i\u015fleme","text":"<p>Bilgisayarl\u0131 \u0130\u015fleme (Computer Vision), robotlar\u0131n ve bilgisayarlar\u0131n kameralar veya sens\u00f6rler  arac\u0131l\u0131\u011f\u0131yla g\u00f6rsel bilgileri g\u00f6rmesini, yorumlamas\u0131n\u0131 ve anlamas\u0131n\u0131 sa\u011flayan bir yapay zek\u00e2 alan\u0131d\u0131r.  G\u00f6r\u00fcnt\u00fcleri yakalama, i\u015fleme ve analiz etme s\u00fcre\u00e7lerini kapsar; nesneleri tan\u0131r, hareketleri takip  eder ve kararlar al\u0131r, b\u00f6ylece robotlar\u0131n \u00e7evresini anlamas\u0131n\u0131 ve etkile\u015fimde bulunmas\u0131n\u0131 sa\u011flar.</p> <p>Yayg\u0131n kullan\u0131m alanlar\u0131:</p> <ul> <li>Robotik: Engel tespiti, nesne tan\u0131ma, \u00e7izgi takip, insan takibi.</li> <li>End\u00fcstriyel otomasyon: Kalite kontrol, barkod/QR kod okuma, s\u0131n\u0131fland\u0131rma ve paketleme.</li> <li>Otonom ara\u00e7lar: \u015eerit tespiti, trafik i\u015fareti tan\u0131ma, yaya alg\u0131lama.</li> <li>Yapay zek\u00e2 ve ara\u015ft\u0131rma: Y\u00fcz tan\u0131ma, jest alg\u0131lama, \u00e7evresel haritalama (\u00f6r. SLAM).</li> </ul>"},{"location":"orbit-ai/#opencvye-giris","title":"OpenCV'ye Giri\u015f","text":"<p>OpenCV (Open Source Computer Vision Library), bilgisayarl\u0131 g\u00f6r\u00fc ve g\u00f6r\u00fcnt\u00fc i\u015fleme i\u00e7in yayg\u0131n olarak  kullan\u0131lan a\u00e7\u0131k kaynakl\u0131 bir k\u00fct\u00fcphanedir. Python\u2019da cv2 mod\u00fcl\u00fc \u00fczerinden kullan\u0131l\u0131r ve \u015funlar\u0131 sa\u011flar:</p> <ul> <li>G\u00f6r\u00fcnt\u00fc ve videolar\u0131 okuma, yazma ve i\u015fleme</li> <li>Nesne tespiti, y\u00fcz tan\u0131ma ve hareket takibi</li> <li>Kamera kalibrasyonu ve art\u0131r\u0131lm\u0131\u015f ger\u00e7eklik uygulamalar\u0131</li> </ul> <p>Kurulum</p> <p>OpenCV\u2019yi pip ile kurabilirsiniz:</p> <pre><code>pip install opencv-python\n</code></pre> <p>Basit \u00d6rnekler</p> <ol> <li> <p>Bir g\u00f6r\u00fcnt\u00fcy\u00fc okuma ve g\u00f6sterme <pre><code>import cv2\n\n# G\u00f6r\u00fcnt\u00fcy\u00fc oku\nimage = cv2.imread('example.jpg')\n\n# G\u00f6r\u00fcnt\u00fcy\u00fc g\u00f6ster\ncv2.imshow('G\u00f6r\u00fcnt\u00fcm', image)\n\n# Bir tu\u015fa bas\u0131lana kadar bekle\ncv2.waitKey(0)\n\n# T\u00fcm pencereleri kapat\ncv2.destroyAllWindows()\n</code></pre></p> </li> <li> <p>Kameradan g\u00f6r\u00fcnt\u00fc okuma <pre><code>import cv2\n\n# Varsay\u0131lan kameray\u0131 a\u00e7 (genellikle 0)\ncap = cv2.VideoCapture(0)\n\n# Tek bir kare yakala\nret, frame = cap.read()\n\n# Kareyi g\u00f6ster\ncv2.imshow('Kamera G\u00f6r\u00fcnt\u00fcs\u00fc', frame)\n\n# Kameray\u0131 serbest b\u0131rak ve pencereleri kapat\ncap.release()\ncv2.destroyAllWindows()\n</code></pre></p> </li> <li> <p>Kameradan video yakalama <pre><code>import cv2\n\n# Varsay\u0131lan kameray\u0131 a\u00e7\ncap = cv2.VideoCapture(0)\n\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n\n    # Video karesini g\u00f6ster\n    cv2.imshow('Video Ak\u0131\u015f\u0131', frame)\n\n    # 'q' tu\u015funa bas\u0131ld\u0131\u011f\u0131nda \u00e7\u0131k\n    if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n        break\n\n# Kameray\u0131 serbest b\u0131rak ve pencereleri kapat\ncap.release()\ncv2.destroyAllWindows()\n</code></pre></p> </li> </ol> <p>Notlar</p> <ul> <li><code>cv2.imshow()</code> g\u00f6r\u00fcnt\u00fcleri veya videolar\u0131 g\u00f6stermek i\u00e7in pencere olu\u015fturur.</li> <li><code>cv2.waitKey()</code> pencereyi yenilemek ve klavye giri\u015fini i\u015flemek i\u00e7in gereklidir.</li> <li>Video i\u00e7in d\u00f6ng\u00fc, \u00e7\u0131k\u0131\u015f yap\u0131lana kadar devam eder.</li> </ul>"},{"location":"orbit-ai/#orbit-robot-kamerasn-kullanma","title":"Orbit Robot Kameras\u0131n\u0131 Kullanma","text":"<p>Orbit kameradan g\u00f6r\u00fcnt\u00fc almak olduk\u00e7a basittir. Yapman\u0131z gereken tek \u015fey <code>capture_image</code>  fonksiyonunu \u00e7a\u011f\u0131rmakt\u0131r; bu fonksiyon, OpenCV ile i\u015flenebilecek BGR format\u0131nda bir  NumPy dizisi (array) d\u00f6nd\u00fcr\u00fcr.</p> <p>\u00d6rnek 1: Kameradan g\u00f6r\u00fcnt\u00fc okuma <pre><code>import cv2 \nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nframe = orbit.capture_image()\n\nif frame is not None:\n    cv2.imshow(\"image\", frame)\n    cv2.waitKey(0)\n\norbit.stop()  \ncv2.destroyAllWindows()\n</code></pre></p> <p>\u00d6rnek 2: Kameradan video yakalama</p> <pre><code>import cv2 \nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nwhile True:\n    try:\n        frame = orbit.capture_image()\n\n        if frame is not None:\n            cv2.imshow(\"image\", frame)\n            if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n                break\n    except KeyboardInterrupt:\n        break\n\norbit.stop()  \ncv2.destroyAllWindows()\n</code></pre>"},{"location":"orbit-ai/#robotlar-icin-bilgisayarl-goru-projeleri","title":"Robotlar i\u00e7in Bilgisayarl\u0131 G\u00f6r\u00fc Projeleri","text":"<p>\u0130\u015fte Orbit \u00fczerinde test edilebilecek baz\u0131 pratik robotik bilgisayarl\u0131 g\u00f6r\u00fc projeleri.  Kod biraz ileri d\u00fczey g\u00f6r\u00fcnebilir, bu y\u00fczden dikkatlice ve ad\u0131m ad\u0131m \u00f6\u011fretilmeli ve \u00f6\u011frencilerin  temel OpenCV kavramlar\u0131na a\u015fina oldu\u011fundan emin olunmal\u0131d\u0131r.</p> <ol> <li> <p>Hareket alg\u0131lama     <pre><code>import cv2\nimport numpy as np\nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;ip-address&gt;\")\nlast_mean = 0\nthreshold = 1.8\nwhile(True):\n    frame = orbit.capture_image()\n    cv2.imshow('frame',frame)\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    result = np.abs(np.mean(gray) - last_mean)\n    if result &gt;= threshold:\n        print(\"Hareket alg\u0131land\u0131\")\n    last_mean= np.mean(gray)\n    if (cv2.waitKey(1) &amp; 0xFF == ord('q')):\n        break\norbit.stop()\ncv2.destroyAllWindows()\n</code></pre></p> <p>Notlar</p> <ul> <li> <p>Sonu\u00e7lara g\u00f6re <code>threshold</code> de\u011ferini ayarlayabilirsiniz. Bu de\u011ferin art\u0131r\u0131lmas\u0131 sistemin  hareket alg\u0131lama do\u011frulu\u011funu azalt\u0131r</p> </li> <li> <p>Orbit robotu, hareket alg\u0131land\u0131\u011f\u0131nda konu\u015fmas\u0131n\u0131 sa\u011flayabilir veya senaryoya g\u00f6re alarm  tetikleyebilirsiniz. \u0130\u015fte Orbit\u2019in 'Hareket alg\u0131land\u0131' demesini sa\u011flayan bir \u00f6rnek.</p> <pre><code>...\n# Orbit'e bir mesaj okut\norbit.text_to_speech(\"Hareket alg\u0131land\u0131\")\n...\n</code></pre> </li> </ul> </li> <li> <p>Renk alg\u0131lama     <pre><code>import cv2\nimport numpy as np\n\nfrom orbitlab import Orbit\n\n# Renkler ve HSV aral\u0131klar\u0131 ile BGR g\u00f6r\u00fcnt\u00fc renkleri tan\u0131mlan\u0131yor\ncolors = {\n    \"Red\": ([136,87,111], [180,255,255], (0,0,255)),\n    \"Green\": ([25,52,72], [102,255,255], (0,255,0)),\n    \"Blue\": ([94,80,2], [120,255,255], (255,0,0))\n}\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\n# Maskeyi geni\u015fletmek i\u00e7in kernel tan\u0131ml\u0131yoruz (morfolojik i\u015flem)\nkernel = np.ones((5,5), np.uint8)\n\nwhile True:\n    # Kameradan bir kare al\u0131yoruz\n    frame = orbit.capture_image()\n\n    # BGR g\u00f6r\u00fcnt\u00fcy\u00fc HSV renk uzay\u0131na \u00e7eviriyoruz\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n\n    # Her renk i\u00e7in d\u00f6ng\u00fc\n    for name, (lower, upper, bgr) in colors.items():\n        # Belirlenen renk aral\u0131\u011f\u0131nda maske olu\u015ftur\n        mask = cv2.inRange(hsv, np.array(lower), np.array(upper))\n\n        # Maske \u00fczerinde geni\u015fletme (dilation) i\u015flemi uyguluyoruz\n        mask = cv2.dilate(mask, kernel)\n\n        # Maskeden konturlar\u0131 bul\n        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n        for cnt in contours:\n            # Yeterince b\u00fcy\u00fck konturlar ile ilgileniyoruz\n            if cv2.contourArea(cnt) &gt; 300:\n                # Konturun etraf\u0131na dikd\u00f6rtgen \u00e7iz\n                x, y, w, h = cv2.boundingRect(cnt)\n                cv2.rectangle(frame, (x,y), (x+w,y+h), bgr, 2)\n\n                # Renk ad\u0131n\u0131 g\u00f6r\u00fcnt\u00fc \u00fczerine yaz\n                cv2.putText(frame, f\"{name} Colour\", (x,y), cv2.FONT_HERSHEY_SIMPLEX, 1, bgr, 2)\n\n    # \u0130\u015flenmi\u015f kareyi g\u00f6ster\n    cv2.imshow(\"Multiple Color Detection\", frame)\n\n    # 'q' tu\u015funa bas\u0131l\u0131nca d\u00f6ng\u00fcden \u00e7\u0131k\n    if cv2.waitKey(10) &amp; 0xFF == ord('q'):\n        break\n\n# Kameray\u0131 serbest b\u0131rak ve t\u00fcm pencereleri kapat\ncap.release()\ncv2.destroyAllWindows()\n</code></pre></p> </li> </ol>"},{"location":"reference/","title":"API Referans\u0131","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>orbit</code> project code.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit","title":"<code>Orbit</code>","text":"<p>               Bases: <code>OrbitWebsocketClient</code></p> <p>Initialize the Orbit robot client.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The IP address of the Orbit robot.</p> required"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.capture_image","title":"<code>capture_image()</code>","text":"<p>Capture the current image from the robot's camera </p> <p>Returns:</p> Name Type Description <code>image</code> <code>ndarray</code> <p>The captured image as a cv2 Mat object, or None if no image data is available.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.current","title":"<code>current()</code>","text":"<p>Get the current of the robot.</p> <p>Returns:</p> Name Type Description <code>current</code> <code>float</code> <p>Current in amperes (A).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.distance_value","title":"<code>distance_value()</code>","text":"<p>Get the distance traveled by the robot.</p> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>Distance in meters (m).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.encoder","title":"<code>encoder()</code>","text":"<p>Get the encoder values of the robot.</p> <p>Returns:</p> Name Type Description <code>encoder</code> <code>list</code> <p>A list of two encoder values [left_encoder, right_encoder].</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.ldr_value","title":"<code>ldr_value()</code>","text":"<p>Get the light-dependent resistor (LDR) value of the robot.</p> <p>Returns:</p> Name Type Description <code>ldr</code> <code>int</code> <p>LDR value as an integer.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.save_image","title":"<code>save_image()</code>","text":"<p>Save the current image from the robot's camera.</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.speed","title":"<code>speed()</code>","text":"<p>Get the speed of the robot. Returns a list of two speed values.</p> <p>Returns:</p> Name Type Description <code>speed</code> <code>list</code> <p>A list of two speed values [left_speed, right_speed] in revolution per minute (RPM).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.temperature","title":"<code>temperature()</code>","text":"<p>Get the temperature of the robot.</p> <p>Returns:</p> Name Type Description <code>temperature</code> <code>float</code> <p>Temperature in degrees Celsius (\u00b0C).</p>"},{"location":"reference/#src.orbitlab.orbit_main.Orbit.voltage","title":"<code>voltage()</code>","text":"<p>Get the voltage of the robot.</p> <p>Returns:</p> Name Type Description <code>voltage</code> <code>float</code> <p>Voltage in volts (V).</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient","title":"<code>OrbitWebsocketClient</code>","text":"<p>               Bases: <code>Thread</code></p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.change_face","title":"<code>change_face(face_id)</code>","text":"<p>Change the robot's facial expression.</p> <p>Parameters:</p> Name Type Description Default <code>face_id</code> <code>FaceId</code> <p>An instance of the FaceId enum representing the desired facial expression</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.dance","title":"<code>dance(song_name)</code>","text":"<p>Make the robot dance to a predefined song.</p> <p>Parameters:</p> Name Type Description Default <code>song_name</code> <code>str</code> <p>The name of the song to dance to.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.head_calibration","title":"<code>head_calibration()</code>","text":"<p>Calibrate the head position of the robot.</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.move_backward","title":"<code>move_backward(distance)</code>","text":"<p>Move the robot backward by a specified distance.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>The distance in meters to move backward.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.move_forward","title":"<code>move_forward(distance)</code>","text":"<p>Move the robot forward by a specified distance.</p> <p>Parameters:</p> Name Type Description Default <code>distance</code> <code>float</code> <p>The distance in meters to move forward.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.play_song","title":"<code>play_song(song_name)</code>","text":"<p>Play a predefined song on the robot.</p> <p>Parameters:</p> Name Type Description Default <code>song_name</code> <code>str</code> <p>The name of the song to be played.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_head_pose","title":"<code>set_head_pose(x, y)</code>","text":"<p>Set the head pose of the robot.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The horizontal angle in degrees (-300 to 300).</p> required <code>y</code> <code>int</code> <p>The vertical angle in degrees (-300 to 300).</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_led_animation","title":"<code>set_led_animation(animation_type, rgb)</code>","text":"<p>Set the LED animation on the robot.</p> <p>Parameters:</p> Name Type Description Default <code>animation_type</code> <code>int</code> <p>The type of LED animation (0-5).</p> required <code>rgb</code> <code>list</code> <p>A list of three integer values representing the RGB color [R, G, B].</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_rgb","title":"<code>set_rgb(rgb)</code>","text":"<p>Set the RGB color of the robot's LED.</p> <p>Parameters:</p> Name Type Description Default <code>rgb</code> <code>list</code> <p>A list of three integer values representing the RGB color [R, G, B].</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.set_rpm","title":"<code>set_rpm(rpm)</code>","text":"<p>Set the RPM of the robot's wheels.</p> <p>Parameters:</p> Name Type Description Default <code>rpm</code> <code>list</code> <p>A list of two integer values [left_rpm, right_rpm]</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.stop","title":"<code>stop()</code>","text":"<p>Stop the client and close the connection.</p>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.text_to_speech","title":"<code>text_to_speech(text, block=True)</code>","text":"<p>Send a text to the robot to speak.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the robot.</p> required <code>block</code> <code>bool</code> <p>If True, wait for the service to complete before returning.</p> <code>True</code>"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.turn_left","title":"<code>turn_left(angle)</code>","text":"<p>Turn the robot left by a specified angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle in degrees to turn left.</p> required"},{"location":"reference/#src.orbitlab.orbit_websocket.websocket_client.OrbitWebsocketClient.turn_right","title":"<code>turn_right(angle)</code>","text":"<p>Turn the robot right by a specified angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>float</code> <p>The angle in degrees to turn right.</p> required"},{"location":"reference/#src.orbitlab.orbit_utils.face_ids.FaceId","title":"<code>FaceId</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for predefined face IDs.</p> <p>Attributes:</p> Name Type Description <code>BRINKING</code> <code>int</code> <p>Face ID for \"BRINKING\".</p> <code>BREATHE</code> <code>int</code> <p>Face ID for \"BREATHE\".</p> <code>COMPASSION</code> <code>int</code> <p>Face ID for \"COMPASSION\".</p> <code>CURIOUS</code> <code>int</code> <p>Face ID for \"CURIOUS\".</p> <code>ERROR</code> <code>int</code> <p>Face ID for \"ERROR\".</p> <code>HEART_EYES</code> <code>int</code> <p>Face ID for \"HEART_EYES\".</p> <code>HELLO</code> <code>int</code> <p>Face ID for \"HELLO\".</p> <code>LOADING</code> <code>int</code> <p>Face ID for \"LOADING\".</p> <code>PLAYFUL</code> <code>int</code> <p>Face ID for \"PLAYFUL\".</p> <code>SHY</code> <code>int</code> <p>Face ID for \"SHY\".</p> <code>STAR_EYES</code> <code>int</code> <p>Face ID for \"STAR_EYES\".</p> <code>SURPRISED</code> <code>int</code> <p>Face ID for \"SURPRISED\".</p> <code>THANK_YOU</code> <code>int</code> <p>Face ID for \"THANK_YOU\".</p>"},{"location":"robotic-programming/","title":"Robotik programlama","text":"<p>Bu b\u00f6l\u00fcmde, temel robotik programlama kavramlar\u0131n\u0131 ve Orbit robot ile ilgili pratik \u00f6rnekleri  \u00f6\u011frenece\u011fiz. Robot alg\u0131lama, karar verme ve kontrol konular\u0131n\u0131 tart\u0131\u015faca\u011f\u0131z.</p>"},{"location":"robotic-programming/#robot-alglama","title":"Robot Alg\u0131lama","text":"<p>Robot alg\u0131s\u0131, bir robotun \u00e7evresini sens\u00f6rler ve veri i\u015fleme kullanarak anlamas\u0131 yetene\u011fidir.  \u0130nsanlar\u0131n d\u00fcnyay\u0131 g\u00f6rmek, duymak ve dokunmak yoluyla alg\u0131lad\u0131\u011f\u0131 gibi, robotlar da kameralar,  LiDAR, ultrasonik sens\u00f6rler, IMU\u2019lar ve daha fazlas\u0131n\u0131 kullan\u0131r.</p> <p></p> <p>Orbit robot, LiDAR, kamera, IMU, ultrasonik sens\u00f6rler, LDR\u2019ler ve s\u0131cakl\u0131k sens\u00f6rleri ile donat\u0131lm\u0131\u015ft\u0131r.  Ancak bu Python k\u00fct\u00fcphanesi yaln\u0131zca ultrasonik, LDR, kamera ve s\u0131cakl\u0131k sens\u00f6rlerini desteklemektedir.</p>"},{"location":"robotic-programming/#ornek","title":"\u00d6rnek","text":"<pre><code>import time\nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nwhile True:\n    try:\n        mesafe = orbit.distance_value()\n    except KeyboardInterrupt:\n        break\n\norbit.stop()\n</code></pre>"},{"location":"robotic-programming/#robot-karar-verme","title":"Robot karar verme","text":"<p>Robot karar verme, bir robotun \u00e7evresinden alg\u0131lad\u0131\u011f\u0131 bilgilere dayanarak en iyi eylemi se\u00e7me s\u00fcrecidir.  Temel olarak, bir robotun hedeflerine ula\u015fmak i\u00e7in bir sonraki ad\u0131mda ne yapaca\u011f\u0131na karar vermesidir.</p> <p>Bunu, robotun alg\u0131lama verilerini yorumlay\u0131p eylemleri planlayan \u201cbeyni\u201d olarak d\u00fc\u015f\u00fcnebilirsiniz.</p> <p>Yukar\u0131daki \u00f6rne\u011fi kullanarak robotun yoluna bir engel \u00e7\u0131kt\u0131\u011f\u0131nda durmas\u0131n\u0131 s\u00f6yleyebiliriz.</p>"},{"location":"robotic-programming/#ornek_1","title":"\u00d6rnek","text":"<pre><code>...\nmesafe = orbit.distance_value()\nif mesafe &lt;= 30:\n    orbit.set_rpm([0, 0])\n...\n</code></pre>"},{"location":"robotic-programming/#robot-kontrolu","title":"Robot Kontrol\u00fc","text":"<p>Robot kontrol\u00fc, bir robotun istenen eylemleri do\u011fru ve g\u00fcvenilir bir \u015fekilde ger\u00e7ekle\u015ftirmesini sa\u011flama s\u00fcrecidir.  Bu, robotun akt\u00fcat\u00f6rlerine (motorlar, servolar vb.) komut g\u00f6ndererek robotun istenildi\u011fi gibi hareket etmesini   veya davranmas\u0131n\u0131 sa\u011flar.</p> <p>Basit\u00e7e: \u201cKontrol, robotun ald\u0131\u011f\u0131 kararlar\u0131 nas\u0131l uygulad\u0131\u011f\u0131d\u0131r.\u201d</p> <p>Orbit, diferansiyel s\u00fcr\u00fc\u015f ile kontrol edilebilen iki motorla donat\u0131lm\u0131\u015ft\u0131r.</p>"},{"location":"robotic-programming/#diferansiyel-surus-nedir","title":"Diferansiyel s\u00fcr\u00fc\u015f nedir?","text":"<p>Diferansiyel s\u00fcr\u00fc\u015f, tekerlekli robotlar\u0131 hareket ettirmenin yayg\u0131n bir y\u00f6ntemidir. Bu sistemde, robotun her iki  yan\u0131nda ba\u011f\u0131ms\u0131z olarak kontrol edilen iki tekerlek bulunur. Her tekerle\u011fin h\u0131z\u0131 ve y\u00f6n\u00fc de\u011fi\u015ftirildi\u011finde  robot ileri, geri gidebilir veya kendi ekseni etraf\u0131nda d\u00f6nebilir.</p> <p>Nas\u0131l \u00c7al\u0131\u015f\u0131r:</p> Sol Tekerlek Sa\u011f Tekerlek Robotun Hareketi \u0130leri \u0130leri D\u00fcz ileri gider Geri Geri D\u00fcz geri gider \u0130leri Durur Sa\u011fa d\u00f6ner (ekseni etraf\u0131nda) Durur \u0130leri Sola d\u00f6ner (ekseni etraf\u0131nda) \u0130leri Geri Yerinde d\u00f6ner (saat y\u00f6n\u00fc veya tersi) <p>\u00d6rnek:</p> <ol> <li>Sol tekerlek 10 RPM h\u0131zla, sa\u011f tekerlek -10 RPM h\u0131zla d\u00f6nerse, robot yerinde d\u00f6ner. <pre><code>import time\nfrom orbitlab import Orbit\n\norbit = Orbit(\"&lt;ip-address&gt;\")\norbit.set_rpm([10, 10])  #sa\u011f tekel fizksel ters -10 RPM yerine (-1 * -10) = 10 RPM\ntime.sleep(5)\norbit.stop()\n</code></pre></li> <li> <p>\u00c7ember \u015feklinde hareket etme: Bir diferansiyel s\u00fcr\u00fc\u015fl\u00fc robotun \u00e7ember \u015feklinde hareket     etmesini sa\u011flamak i\u00e7in, sol ve sa\u011f tekerlekler ayn\u0131 y\u00f6nde fakat farkl\u0131 h\u0131zlarda d\u00f6nd\u00fcr\u00fclmelidir.</p> <ul> <li> <p>H\u0131z fark\u0131, robotun d\u00f6nece\u011fi \u00e7emberin yar\u0131\u00e7ap\u0131n\u0131 belirler.</p> </li> <li> <p>Robot, daha yava\u015f d\u00f6nen tekerlek y\u00f6n\u00fcne do\u011fru d\u00f6ner.</p> </li> </ul> <pre><code>...\norbit.set_rpm([20, -10])\n...\n</code></pre> </li> </ol>"},{"location":"robotic-programming/#dogrusal-ve-acsal-hzndan-rpm-hesaplanmas","title":"Do\u011frusal ve A\u00e7\u0131sal H\u0131z\u0131ndan RPM hesaplanmas\u0131","text":"<p>Bir diferansiyel tahrikli robotta hareket, sol ve sa\u011f tekerleklerin d\u00f6nme h\u0131zlar\u0131 ayarlanarak  sa\u011flan\u0131r. Belirli bir do\u011frusal h\u0131z (ileri/geri hareket) ve a\u00e7\u0131sal h\u0131z (d\u00f6nme) elde  etmek i\u00e7in, her motorun ne kadar h\u0131zl\u0131 d\u00f6nmesi gerekti\u011fini yani RPM (dakikadaki devir say\u0131s\u0131)  cinsinden hesaplamam\u0131z gerekir.</p> <p>Bu d\u00f6n\u00fc\u015f\u00fcm, motor enkoderleriyle donat\u0131lm\u0131\u015f Orbit gibi robotlar i\u00e7in olduk\u00e7a \u00f6nemlidir. Sabit  gecikmeler kullanmak yerine, ger\u00e7ek kinematik denklemlere dayanarak tekerlek h\u0131zlar\u0131n\u0131 hassas  bir \u015fekilde komutland\u0131rabiliriz.</p> <p>Do\u011frusal ve A\u00e7\u0131sal H\u0131z\u0131ndan RPM hesaplanmas\u0131</p> <p>Gerekli Parametreler:</p> <ul> <li>v: Robotun do\u011frusal h\u0131z\u0131 (m/s cinsinden)</li> <li>\u03c9: Robotun a\u00e7\u0131sal h\u0131z\u0131 (rad/s cinsinden)</li> <li>r: Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>L: \u0130ki tekerlek aras\u0131ndaki mesafe, yani dingil a\u00e7\u0131kl\u0131\u011f\u0131 (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li> <p>Tekerleklerin Do\u011frusal H\u0131z\u0131n\u0131 Hesaplay\u0131n:     Robotun hareketi iki tekerle\u011fe b\u00f6l\u00fcn\u00fcr:     $$     v_L = v - \\frac{L}{2} \\cdot \\omega     $$</p> \\[ v_R = v + \\frac{L}{2} \\cdot \\omega \\] <ul> <li>\\(v_L\\) ve \\(v_R\\): Sol ve sa\u011f tekerleklerin do\u011frusal h\u0131zlar\u0131d\u0131r.</li> </ul> </li> <li> <p>Do\u011frusal H\u0131z\u0131 A\u00e7\u0131sal H\u0131za D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:     Motorlar d\u00f6ner hareket yapt\u0131\u011f\u0131 i\u00e7in tekerlek h\u0131z\u0131n\u0131 radyan/saniye (rad/s) cinsine \u00e7eviriyoruz:</p> \\[ \\omega_L = \\frac{v_L}{r}, \\quad \\omega_R = \\frac{v_R}{r} \\] </li> <li> <p>A\u00e7\u0131sal H\u0131z\u0131 RPM\u2019ye D\u00f6n\u00fc\u015ft\u00fcr\u00fcn:     RPM (dakikadaki devir say\u0131s\u0131) elde etmek i\u00e7in:</p> \\[ RPM = \\omega \\cdot \\frac{60}{2\\pi} \\] <p>Yani:</p> \\[ RPM_L = \\omega_L \\cdot \\frac{60}{2\\pi}, \\quad RPM_R = \\omega_R \\cdot \\frac{60}{2\\pi} \\] </li> </ol> <p>\u00d6rnek Python Fonksiyonu:</p> <p>Tekerlekler aras\u0131ndaki yar\u0131\u00e7ap ve mesafe <code>orbitlab</code> sabit de\u011ferlerinde bulunur.</p> <pre><code>import math\nfrom orbitlab import Orbit\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef speed_to_rpm(v, omega, r, L):\n    v_l = v - (L / 2.0) * omega\n    v_r = v + (L / 2.0) * omega\n\n    omega_l = v_l / r\n    omega_r = v_r / r\n\n    rpm_l = omega_l * 60 / (2 * math.pi)\n    rpm_r = omega_r * 60 / (2 * math.pi)\n\n    return [rpm_l, rpm_r]\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <pre><code>...\nrpm_degerleri = speed_to_rpm(v=0.3, omega=0.4, r=r, L=L)\nprint(\"Sol RPM:\", rpm_degerleri[0])\nprint(\"Sa\u011f RPM:\", rpm_degerleri[1])\n...\n</code></pre>"},{"location":"robotic-programming/#rpm-degerlerinden-dogrusal-ve-acsal-hz-hesaplama","title":"RPM De\u011ferlerinden Do\u011frusal ve A\u00e7\u0131sal H\u0131z Hesaplama","text":"<p>Bir diferansiyel tahrikli robotta, sol ve sa\u011f motorlar\u0131n RPM de\u011ferlerini kullanarak  robotun ger\u00e7ek do\u011frusal (ileri/geri) ve a\u00e7\u0131sal (d\u00f6nme) h\u0131zlar\u0131n\u0131 hesaplamak  m\u00fcmk\u00fcnd\u00fcr. Bu i\u015flem, ileri kinemati\u011fin tersidir.</p> <p>RPM De\u011ferlerinden Do\u011frusal ve A\u00e7\u0131sal H\u0131z Hesaplama</p> <p>Verilen Parametreler:</p> <ul> <li>\\(\\text{RPM}_L\\): Sol motorun RPM de\u011feri</li> <li>\\(\\text{RPM}_R\\): Sa\u011f motorun RPM de\u011feri</li> <li>\\(r\\): Tekerlek yar\u0131\u00e7ap\u0131 (metre cinsinden)</li> <li>\\(L\\): \u0130ki tekerlek aras\u0131ndaki mesafe (dingil a\u00e7\u0131kl\u0131\u011f\u0131) (metre cinsinden)</li> </ul> <p>Ad\u0131m Ad\u0131m D\u00f6n\u00fc\u015ft\u00fcrme S\u00fcreci:</p> <ol> <li> <p>RPM\u2019yi a\u00e7\u0131sal h\u0131za \u00e7evirin (rad/s):</p> \\[ \\omega_L = \\text{RPM}_L \\cdot \\frac{2\\pi}{60} \\] \\[ \\omega_R = \\text{RPM}_R \\cdot \\frac{2\\pi}{60} \\] </li> <li> <p>A\u00e7\u0131sal h\u0131z\u0131 do\u011frusal h\u0131za \u00e7evirin:</p> \\[ v_L = \\omega_L \\cdot r \\] \\[ v_R = \\omega_R \\cdot r \\] </li> <li> <p>Robotun do\u011frusal ve a\u00e7\u0131sal h\u0131z\u0131n\u0131 hesaplay\u0131n:</p> \\[ v = \\frac{v_L + v_R}{2} \\] \\[ \\omega = \\frac{v_R - v_L}{L} \\] </li> </ol> <p>Python Kod \u00d6rne\u011fi:</p> <pre><code>import math\nfrom orbitlab import Orbit\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\ndef rpm_to_speed(rpm_l, rpm_r, r, L):\n    # 1. RPM \u2192 rad/s\n    omega_l = rpm_l * 2 * math.pi / 60\n    omega_r = rpm_r * 2 * math.pi / 60\n\n    # 2. rad/s \u2192 m/s\n    v_l = omega_l * r\n    v_r = omega_r * r\n\n    # 3. Robotun h\u0131zlar\u0131\n    v = (v_l + v_r) / 2\n    omega = (v_r - v_l) / L\n\n    return v, omega\n</code></pre> <p>Kullan\u0131m \u00d6rne\u011fi:</p> <pre><code>...\nv, omega = rpm_to_speed(rpm_l=100, rpm_r=120, r=r, L=L)\nprint(f\"Do\u011frusal h\u0131z: {v:.2f} m/s\")\nprint(f\"A\u00e7\u0131sal h\u0131z: {omega:.2f} rad/s\")\n...\norbit.stop()\n</code></pre> <p>Bu i\u015flem sayesinde, robotunuzun enkoderlerinden gelen RPM verilerini kullanarak robotun  ger\u00e7ek hareketini (ileri gitme h\u0131z\u0131 ve d\u00f6n\u00fc\u015f h\u0131z\u0131) do\u011fru bir \u015fekilde \u00f6l\u00e7ebilirsiniz.</p> <p>Art\u0131k robotun motorlar\u0131ndan al\u0131nan ger\u00e7ek zamanl\u0131 RPM verilerini kullanarak, zamanla kat  edilen mesafeyi hassas bir \u015fekilde hesaplayabiliriz. Bu y\u00f6ntem, zaman tabanl\u0131 tahminlere  k\u0131yasla daha do\u011fru ve g\u00fcvenilir bir hareket takibi sa\u011flamak i\u00e7in enkoder geri bildiriminden  yararlan\u0131r.</p> <p>\u00d6rnek: <pre><code>from orbitlab import Orbit\nimport time\nmesafe = 0.0\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, -10])\n\nwhile mesafe &lt;= 1.0:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    mesafe += v * 0.1\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre></p> <p>Robotun y\u00f6nelme a\u00e7\u0131s\u0131, a\u00e7\u0131sal h\u0131z\u0131n\u0131n ge\u00e7en zamanla \u00e7arp\u0131lmas\u0131yla hesaplanabilir. Bu y\u00f6ntem,  zaman i\u00e7inde robotun y\u00f6nelimini tahmin etmek i\u00e7in basit fakat etkili bir yakla\u015f\u0131md\u0131r.</p> <p>\u00d6rnek: <pre><code>from orbitlab import Orbit\nimport math\nimport time\n\naci = 0.0\n\norbit = Orbit(\"&lt;ip-address&gt;\")\n\nr = orbit.RADIUS\nL = orbit.WHEEL_L\n\norbit.set_rpm([10, 10])\n\nwhile aci &lt;= math.pi/2:\n    sol_motor_rpm, sag_motor_rpm = orbit.speed()\n    v, omega = rpm_to_speed(sol_motor_rpm, sag_motor_rpm, r, L)\n    phi += omega * 0.1\n    aci = math.atan2(math.sin(phi), math.cos(phi))\n    time.sleep(0.1)\n\norbit.set_rpm([0, 0])\norbit.stop()\n</code></pre></p>"}]}